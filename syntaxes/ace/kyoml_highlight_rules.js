/* ***** BEGIN LICENSE BLOCK *****
 * Distributed under the BSD license:
 *
 * Copyright (c) 2012, Ajax.org B.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Ajax.org B.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * ***** END LICENSE BLOCK ***** */

/* This file was autogenerated from ./grammar.tmLanguage.json (uuid: ) */
/****************************************************************************************
 * IT MIGHT NOT BE PERFECT ...But it's a good start from an existing *.tmlanguage file. *
 * fileTypes                                                                            *
 ****************************************************************************************/

define(function(require, exports, module) {
"use strict";

var oop = require("../lib/oop");
var TextHighlightRules = require("./text_highlight_rules").TextHighlightRules;

var kyomlHighlightRules = function() {
    // regexp must not have capturing parentheses. Use (?:) instead.
    // regexps are ordered -> the first match is used

    this.$rules = {
        start: [{
            include: "#main"
        }],
        "#main": [{
            include: "#blocks"
        }, {
            include: "#directives"
        }, {
            include: "#comment"
        }, {
            include: "#punctuation"
        }, {
            include: "#illegal"
        }],
        "#data": [{
            token: "punctuation.definition.array.kyoml",
            regex: /\[/,
            push: [{
                token: "punctuation.definition.array.kyoml",
                regex: /\]/,
                next: "pop"
            }, {
                include: "#data"
            }, {
                include: "#comment"
            }]
        }, {
            token: "punctuation.definition.map.kyoml",
            regex: /\{/,
            push: [{
                token: "punctuation.definition.map.kyoml",
                regex: /\}/,
                next: "pop"
            }, {
                include: "#map_key_value"
            }, {
                include: "#comment"
            }]
        }, {
            token: "constant.numeric.kyoml",
            regex: /[-\x002b]?[\d.]+/
        }, {
            token: "constant.language.kyoml",
            regex: /true|false|yes|no/
        }, {
            include: "#strings"
        }, {
            include: "#directives"
        }, {
            include: "#punctuation"
        }],
        "#strings": [{
            token: "string.quoted.double.basic.block.kyoml",
            regex: /"/,
            push: [{
                token: "string.quoted.double.basic.block.kyoml",
                regex: /"/,
                next: "pop"
            }, {
                include: "#interpolation"
            }, {
                token: "constant.character.escape.kyoml",
                regex: /\\(?:[btnfr"\\$\/ ]|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/
            }, {
                token: "invalid.illegal.escape.kyoml",
                regex: /\\[^btnfr\/"\\$]/
            }, {
                defaultToken: "string.quoted.double.basic.block.kyoml"
            }]
        }, {
            token: "string.quoted.single.basic.block.kyoml",
            regex: /'/,
            push: [{
                token: "string.quoted.single.basic.block.kyoml",
                regex: /'/,
                next: "pop"
            }, {
                token: "constant.character.escape.kyoml",
                regex: /\\(?:[btnfr'\\$\/ ]|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/
            }, {
                token: "invalid.illegal.escape.kyoml",
                regex: /\\[^btnfr\/'\\$]/
            }, {
                defaultToken: "string.quoted.single.basic.block.kyoml"
            }]
        }],
        "#interpolation": [{
            token: "keyword.operator.kyoml",
            regex: /\$\{/,
            push: [{
                token: "keyword.operator.kyoml",
                regex: /\}/,
                next: "pop"
            }, {
                defaultToken: "string.interpolated.kyoml"
            }]
        }],
        "#comment": [{
            token: [
                "text",
                "punctuation.definition.comment.kyoml",
                "comment.line.number-sign.kyoml"
            ],
            regex: /(\s*)(#)(.*)$/,
            comment: "Comments"
        }],
        "#punctuation": [{
            token: "punctuation.kyoml",
            regex: /,/,
            comment: "general punctuation"
        }],
        "#key_value": [{
            token: "invalid.illegal.noKey.kyoml",
            regex: /\s*=.*$/
        }, {
            token: "invalid.deprecated.noValue.kyoml",
            regex: /\s*[A-Za-z_\-][A-Za-z0-9_\-]*\s*=(?=\s*$)/
        }, {
            token: [
                "text",
                "entity.name.tag.kyoml",
                "text",
                "punctuation.definition.keyValue.kyoml",
                "text"
            ],
            regex: /(\s*)([A-Za-z_][A-Za-z0-9_-]*)(\s*)(=)(\s*)/,
            push: [{
                include: "#data"
            }, {
                include: "#comment"
            }, {
                token: "text",
                regex: /$|\,|\s*(?=\}|\s*\n\s*([A-Za-z_][A-Za-z0-9_-]*))/,
                next: "pop"
            }]
        }],
        "#map_key_value": [{
            token: "invalid.illegal.noKey.kyoml",
            regex: /\s*:.*$/
        }, {
            token: "invalid.deprecated.noValue.kyoml",
            regex: /\s*"[A-Za-z_\-][A-Za-z0-9_\-]*"\s*:(?=\s*$)/
        }, {
            token: [
                "text",
                "string.quoted.double.basic.kyoml",
                "text",
                "punctuation.definition.keyValue.kyoml",
                "text"
            ],
            regex: /(\s*)("[A-Za-z_][A-Za-z0-9_-]*")(\s*)(:)(\s*)/,
            push: [{
                token: "text",
                regex: /$|\,|\s*(?=\})/,
                next: "pop"
            }, {
                include: "#data"
            }, {
                include: "#comment"
            }]
        }],
        "#directives": [{
            token: "keyword.other.kyoml",
            regex: /[\x003d\x003a]|\|>|<\|/
        }, {
            token: "support.function.kyoml",
            regex: /@\b[a-zA-Z][a-zA-Z0-9_]*\(/,
            push: [{
                token: "support.function.kyoml",
                regex: /\)/,
                next: "pop"
            }, {
                include: "#data"
            }, {
                include: "#comment"
            }]
        }, {
            token: "support.function.kyoml",
            regex: /@\b[a-zA-Z][a-zA-Z0-9_]*/
        }],
        "#blocks": [{
            token: [
                "entity.name.section.kyoml",
                "text",
                "punctuation.definition.array.kyoml"
            ],
            regex: /(\b[a-zA-Z][a-zA-Z0-9_]*)(\s*)(\{)/,
            push: [{
                token: "punctuation.definition.array.kyoml",
                regex: /\}/,
                next: "pop"
            }, {
                include: "#main"
            }]
        }, {
            include: "#key_value"
        }],
        "#illegal": [{
            token: "invalid.illegal.kyoml",
            regex: /[^\s]/
        }]
    }
    
    this.normalizeRules();
};

kyomlHighlightRules.metaData = {
    fileTypes: ["kyo", "kyoml"],
    name: "kyoml",
    scopeName: "source.kyoml"
}


oop.inherits(kyomlHighlightRules, TextHighlightRules);

exports.kyomlHighlightRules = kyomlHighlightRules;
});
